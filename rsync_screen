######################
# usage:
#       rsync_screen SOURCEDIR TARGETHOST:TARGETDIR 
#
# rsync_screen copies folders using rsync, with the transfer continuing in the background also in case of network disruption. 
# It also automatically saves the rsync log, and prints the exit status at the end (to both terminal and log file).
# Before exiting, rsync_screen waits for the user to press ENTER, so as to give the user a chance to review the terminal output.
# This is because the output of rsync_screen to the terminal is erased at exit.
#
# Note: When running rsync_screen already inside a 'screen' command session, it behaves differently than normal.
#	Instead of executing the rsync in the foreground (i.e., waiting for it to terminate before passing to the next command), 
#	it executes it in the background (i.e., while rsync_screen runs, the shell continues to execute the rest of the script).
#	However, the terminal ouptut of the subsequent commands in the script will not be shown until rsync_screen terminates.
#	If additional screen commands are executed while rsync_screen runs, their output will not be shown at all.
#	The above might be problematic when a script executes several rsync_screen commands in a row; they might be executed in parallel, 
#	and the servers might hit their limit on concurrent ssh or rsync sessions!
#
# Author: Oren Civier
#
# Acknowledgments: The author acknowledge the facilities and scientific and technical assistance of the National Imaging Facility, 
#                  a National Collaborative Research Infrastructure Strategy (NCRIS) capability, at Swinburne Neuroimaging, Swinburne University.
#######################

if [ $# -ne 2 ]
  then
    echo 'rsync_screen: wrong number of arguments provided'
    echo 'Usage: rsync_screen SOURCEDIR TARGETHOST:TARGETDIR'
  exit
fi

# get real paths and convert / to -
SOURCEDIR_DASH=$(realpath $1 | sed 's/\//-/g')

# check if TARGETDIR has host
if grep -q ':' <<< $2
then
	# if yes, no need realpath
	TARGETDIR_DASH=$(echo $2 | sed 's/\//-/g')
else
	# if not, need realpath
	TARGETDIR_DASH=$(realpath $2 | sed 's/\//-/g')
fi

# execute rsync within a screen command, printing the exit code at the end and waiting for ENTER to continue.
# Everything is also logged to a logfile in the home directory that contains source and target dirs, as well as a unique date.
# NOTE: in order for the command to work, none of the lines below should be indented 

# the trailing '/' after source indicate that need to copy files within folder rather than folder itself. 
# If the source and target folder have the same name, rsync automatically copy files within folder rather than folder itself;
# but if names are different, must specify the slash to idicate it!
# To prevent this inconcsistent behavior, better to always have a trailing /. However, cannot copy single files

# The flags preserve permissions

# -vx is order to have a record of the command used

screen bash -vx -c '(rsync -avPxHS --no-g --chmod=Dg+s '$1'/ '$2'; echo "EXIT CODE: "${?}) 2>&1 '\
'| tee '${HOME}'/RSYNC_'${SOURCEDIR_DASH}'_TO_'${TARGETDIR_DASH}'_AT_'$(date -Iseconds)'.txt; '\
'read -p "Press enter to continue"'
