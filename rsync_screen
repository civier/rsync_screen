######################
# usage:
#       rsync_screen SOURCEDIR TARGETHOST:TARGETDIR 
#
# rsync_screen copies folders using rsync, with the transfer continuing in the background also in case of network disruption. 
# It also keeps the rsync log, and prints the exit status at the end
#
# Note: when running rsync_screen already inside a 'screen' command session, it might be executed in the background, i.e.,
#       bash will continue to the next command in line without waiting for the output to terminate.
#	This might be problematic when executing many rsync_screen; they might be executed in parallel instead of in a row, and the
#	servers might hit their limit on concurrent ssh or rsync sessions
#
#######################

if [ $# -ne 2 ]
  then
    echo 'rsync_screen: wrong number of arguments provided'
    echo 'Usage: rsync_screen SOURCEDIR TARGETHOST:TARGETDIR'
  exit
fi

# get real paths and convert / to -
SOURCEDIR_DASH=$(realpath $1 | sed 's/\//-/g')

# check if TARGETDIR has host
if grep -q ':' <<< $2
then
	# if yes, no need realpath
	TARGETDIR_DASH=$(echo $2 | sed 's/\//-/g')
else
	# if not, need realpath
	TARGETDIR_DASH=$(realpath $2 | sed 's/\//-/g')
fi

# execute rsync within a screen command, printing the exit code at the end and waiting for ENTER to continue.
# Everything is also logged to a logfile in the home directory that contains source and target dirs, as well as a unique date.
# NOTE: in order for the command to work, none of the lines below should be indented 

screen bash -c '(rsync -avPxHS --no-g --chmod=Dg+s,a-w '$1' '$2'; echo "EXIT CODE: "${?}) 2>&1 '\
'| tee '${HOME}'/RSYNC_'${SOURCEDIR_DASH}'_TO_'${TARGETDIR_DASH}'_AT_'$(date -Iseconds)'.txt; '\
'read -p "Press enter to continue"'
